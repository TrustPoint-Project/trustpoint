name: Pytest

#on: [ pull_request ]
on:
  push:
    branches: ["test-plan-clean-up"]

jobs:
  pytest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          python-version: 3.12

      - name: Run database migrations
        run: |
          echo "y" | uv run trustpoint/manage.py reset_db

      - name: Run Pytest with Coverage and move reports to reports folder
        run: |
          mkdir -p reports
          uv run pytest \
          --cov=trustpoint \
          --cov-report=xml \
          --html=reports/pytest-report.html \
          --self-contained-html \
          --junitxml=reports/junit-report.xml \
          trustpoint/ | tee reports/pytest-output.log
          mv coverage.xml reports/coverage.xml

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: pytest-reports
          path: reports/

#      - name: Display Summary in GitHub Actions
#        run: |
#          echo "## Pytest Results" >> $GITHUB_STEP_SUMMARY
#          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
#          cat reports/pytest-output.log >> $GITHUB_STEP_SUMMARY
#          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

#      - name: Fail Job if Tests Failed
#        run: |
#          if grep -q "errors="[1-9]" failures="[1-9]" skipped="[1-9]"" reports/junit-report.xml; then
#            echo "‚ùå Pytest failed! Failing job."
#            exit 1
#          fi

      - name: Format test summary and enforce all tests passed
        run: |
          python - <<'EOF'
          import os
          import xml.etree.ElementTree as ET

          # Parse the junit XML file generated by pytest
          tree = ET.parse("test-results.xml")
          root = tree.getroot()
          tests = int(root.attrib.get("tests", 0))
          failures = int(root.attrib.get("failures", 0))
          errors = int(root.attrib.get("errors", 0))
          skipped = int(root.attrib.get("skipped", 0)) if "skipped" in root.attrib else 0
          passed = tests - failures - errors - skipped

          # Format the summary text
          summary = (
              "### Test Summary\n"
              f"- Total tests: {tests}\n"
              f"- Passed: {passed}\n"
              f"- Failures: {failures}\n"
              f"- Errors: {errors}\n"
              f"- Skipped: {skipped}\n"
          )
          print(summary)

          # Write the summary to the GitHub job summary if available
          if "GITHUB_STEP_SUMMARY" in os.environ:
              with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as summary_file:
                  summary_file.write(summary)

          # Fail the step (and thus the job) if there are any failures or errors
          if failures or errors:
              exit(1)
          EOF
